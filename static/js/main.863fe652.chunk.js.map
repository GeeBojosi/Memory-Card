{"version":3,"sources":["Header.js","Card.js","Footer.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["Header","this","props","score","highScore","className","Component","Card","handleClick","bind","handleScoring","id","image","name","onClick","src","alt","Footer","Game","state","characters","clickeId","loading","handleScore","a","fetch","res","json","data","charUrl","fetchCharacters","results","i","num_of_chars","push","shuffle","setState","url","charData","arr","randomIndex","currentIndex","length","Math","floor","random","includes","alert","st","increment","map","c","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.863fe652.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    const { score, highScore } = this.props;\r\n    return (\r\n      <div className='Header'>\r\n        <h1>Rick and Morty Memory Game</h1>\r\n        <div className='Header-scoreboard'>\r\n          <p>score: {score}</p>\r\n          <p>High score: {highScore}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Card.css';\r\n\r\nexport default class Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  handleClick() {\r\n    this.props.handleScoring(this.props.id);\r\n  }\r\n  render() {\r\n    const { image, name } = this.props;\r\n    return (\r\n      <div className='Card' onClick={this.handleClick}>\r\n        <img src={image} alt={name} />\r\n        <p>{name}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Footer.css';\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className='Footer'>\r\n        <p>Made with love</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Card from './Card';\r\nimport Footer from './Footer';\r\nimport './Game.css';\r\n\r\nexport default class Game extends Component {\r\n  static defaultProps = {\r\n    num_of_chars: 12,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      characters: [],\r\n      score: 0,\r\n      highScore: 0,\r\n      clickeId: [],\r\n      loading: true,\r\n    };\r\n    this.handleScore = this.handleScore.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const characters = [];\r\n    const res = await fetch('https://rickandmortyapi.com/api');\r\n    const data = await res.json();\r\n\r\n    const charUrl = data.characters;\r\n    const results = await this.fetchCharacters(charUrl);\r\n    for (let i = 0; i < this.props.num_of_chars; i++) {\r\n      const { id, name, image } = results[i];\r\n      characters.push({ id, name, image });\r\n    }\r\n    this.shuffle(characters);\r\n    this.setState({\r\n      characters: characters,\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  async fetchCharacters(url) {\r\n    const data = await fetch(url);\r\n    const charData = await data.json();\r\n\r\n    return charData.results;\r\n  }\r\n\r\n  shuffle(arr) {\r\n    let currentIndex = arr.length,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n\r\n      // And swap it with the current element.\r\n      [arr[currentIndex], arr[randomIndex]] = [\r\n        arr[randomIndex],\r\n        arr[currentIndex],\r\n      ];\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  handleScore(id) {\r\n    const { clickeId, characters } = this.state;\r\n    if (clickeId.length === 0 || !clickeId.includes(id)) {\r\n      this.increment();\r\n      this.state.clickeId.push(id);\r\n      this.setState(st => ({\r\n        clickeId: [...st.clickeId],\r\n      }));\r\n    } else if (clickeId.includes(id)) {\r\n      alert('Game over click OK to start');\r\n      this.setState(st => ({\r\n        score: 0,\r\n        highScore: st.score + st.highScore,\r\n        clickeId: [],\r\n      }));\r\n    } else if (clickeId.length === characters.length) {\r\n      alert('Congratulation you win!');\r\n    }\r\n  }\r\n\r\n  increment() {\r\n    this.setState(st => ({\r\n      score: st.score + 1,\r\n    }));\r\n    this.shuffle(this.state.characters);\r\n  }\r\n\r\n  render() {\r\n    const { score, highScore, characters, loading } = this.state;\r\n\r\n    if (loading) {\r\n      return (\r\n        <div>\r\n          <h1>Loading...</h1>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <Header score={score} highScore={highScore} />\r\n        <div className='Game'>\r\n          {characters.map(c => (\r\n            <Card\r\n              id={c.id}\r\n              image={c.image}\r\n              name={c.name}\r\n              key={c.name}\r\n              handleScoring={this.handleScore}\r\n            />\r\n          ))}\r\n        </div>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport './App.css';\n\nclass App extends Component{\n  render() {\n    return(\n      <div className=\"App\">\n        <Game />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}